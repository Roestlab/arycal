name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install musl-tools (for Linux builds)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Set up Visual Studio Build Tools (for Windows builds)
        if: matrix.target == 'x86_64-pc-windows-msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Set up SQLite for Windows builds
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          # Download SQLite amalgamation source
          curl -L https://sqlite.org/2024/sqlite-amalgamation-3450100.zip -o sqlite.zip
          unzip sqlite.zip -d sqlite
          cd sqlite/sqlite-amalgamation-3450100
          # Compile SQLite into a static library
          cl /c /Fosqlite3.obj sqlite3.c
          lib /OUT:sqlite3.lib sqlite3.obj
          # Set the SQLite library path for the linker
          echo "SQLITE_LIB_PATH=$(pwd)" >> $GITHUB_ENV

      - name: Build and upload binaries
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: arycal
          # (optional) Target triple, default is host triple.
          # This is optional but it is recommended that this always be set to
          # clarify which target you are building for if macOS is included in
          # the matrix because GitHub Actions changed the default architecture
          # of macos-latest since macos-14.
          target: ${{ matrix.target }}
          # (optional) On which platform to distribute the `.tar.gz` file.
          # [default value: unix]
          # [possible values: all, unix, windows, none]
          tar: unix
          # (optional) On which platform to distribute the `.zip` file.
          # [default value: windows]
          # [possible values: all, unix, windows, none]
          zip: windows
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          # For Windows builds, set the SQLite library path
          LIB: ${{ env.SQLITE_LIB_PATH }}

      - name: Build and upload GUI binaries
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: arycal-gui
          # (optional) Target triple, default is host triple.
          # This is optional but it is recommended that this always be set to
          # clarify which target you are building for if macOS is included in
          # the matrix because GitHub Actions changed the default architecture
          # of macos-latest since macos-14.
          target: ${{ matrix.target }}
          # (optional) On which platform to distribute the `.tar.gz` file.
          # [default value: unix]
          # [possible values: all, unix, windows, none]
          tar: unix
          # (optional) On which platform to distribute the `.zip` file.
          # [default value: windows]
          # [possible values: all, unix, windows, none]
          zip: windows
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          # For Windows builds, set the SQLite library path
          LIB: ${{ env.SQLITE_LIB_PATH }}
