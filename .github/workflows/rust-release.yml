name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    # Export the upload_url from the release creation step
    outputs:
      upload_url: ${{ steps.create_steps.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true

      - id: create_steps
        uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # ----------- Normal Builds (fast) -----------
  upload-assets:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # CLI: dynamic musl via musl-gcc
          - name: arycal-cli-linux-musl
            bin: arycal
            os: ubuntu-latest
            build: |
              sudo apt-get update && sudo apt-get install -y musl-tools
              CC=musl-gcc cargo build --release
              cp target/release/arycal artifacts/arycal-cli

          # CLI: fully static musl via cross
          - name: arycal-cli-linux-musl-static
            bin: arycal
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            build: |
              cargo install cross --git https://github.com/cross-rs/cross
              cross build --release --target=x86_64-unknown-linux-musl
              cp target/x86_64-unknown-linux-musl/release/arycal artifacts/arycal-cli

          # CLI: glibc + MPI
          - name: arycal-cli-linux-gnu-mpi
            bin: arycal
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            build: |
              sudo apt-get update && sudo apt-get install -y libopenmpi-dev openmpi-bin
              cargo build --release --target=x86_64-unknown-linux-gnu --features mpi
              cp target/x86_64-unknown-linux-gnu/release/arycal artifacts/arycal-cli

          # GUI: glibc on 22.04
          - name: arycal-gui-linux-gnu
            bin: arycal-gui
            target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            build: |
              sudo apt-get update && sudo apt-get install -y \
                libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libegl1-mesa libgtk-3-dev
              cargo build --release --target=x86_64-unknown-linux-gnu
              cp target/x86_64-unknown-linux-gnu/release/arycal-gui artifacts/arycal-gui

          # macOS + Windows
          - name: arycal-cli-macos
            bin: arycal
            target: x86_64-apple-darwin
            os: macos-latest
            build: |
              rustup target add x86_64-apple-darwin
              cargo build --release --target=x86_64-apple-darwin
              cp target/x86_64-apple-darwin/release/arycal artifacts/arycal-cli

          - name: arycal-gui-macos
            bin: arycal-gui
            target: x86_64-apple-darwin
            os: macos-latest
            build: |
              rustup target add x86_64-apple-darwin
              cargo build --release --target=x86_64-apple-darwin
              cp target/x86_64-apple-darwin/release/arycal-gui artifacts/arycal-gui

          - name: arycal-cli-windows
            bin: arycal
            target: x86_64-pc-windows-msvc
            os: windows-latest
            build: |
              rustup target add x86_64-pc-windows-msvc
              cargo build --release --target=x86_64-pc-windows-msvc
              cp target/x86_64-pc-windows-msvc/release/arycal.exe artifacts/arycal-cli.exe

          - name: arycal-gui-windows
            bin: arycal-gui
            target: x86_64-pc-windows-msvc
            os: windows-latest
            build: |
              rustup target add x86_64-pc-windows-msvc
              cargo build --release --target=x86_64-pc-windows-msvc
              cp target/x86_64-pc-windows-msvc/release/arycal-gui.exe artifacts/arycal-gui.exe

    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p artifacts

      # <-- CACHE STEP -->
      - name: Cache Cargo registry & target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.name }}-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true

      - name: Build
        run: |
          bash -c "${{ matrix.build }}"

      - name: Upload Release Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin:     ${{ matrix.bin }}
          archive: ${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}
          target:  ${{ matrix.target || '' }}
          include: LICENSE,README.md
          tar:     unix
          zip:     windows
          token:   ${{ secrets.GITHUB_TOKEN }}

  # ----------- Compat Build (18.04 container) -----------
  upload-assets-compat:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: arycal-gui-linux-gnu-compat
            bin: arycal-gui
            target: x86_64-unknown-linux-gnu
            container: ubuntu:18.04

    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p artifacts

      - name: Build in Ubuntu 18.04 container
        run: |
          docker run --rm \
            -v "$(pwd)":/work -w /work \
            ${{ matrix.container }} bash -c "
              apt-get update &&
              apt-get install -y curl build-essential pkg-config libssl-dev \
                                 libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev \
                                 libegl1-mesa libgtk-3-dev &&
              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.85.0 &&
              source \$HOME/.cargo/env &&
              rustup target add ${{ matrix.target }} &&
              cargo build --release --target=${{ matrix.target }} &&
              cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/
            "

      - name: Package compat binary
        run: |
          tar -czf artifacts/${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}.tar.gz \
            -C artifacts ${{ matrix.bin }}

      - name: Upload Compat Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url:         ${{ needs.create-release.outputs.upload_url }}
          asset_path:         artifacts/${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}.tar.gz
          asset_name:         ${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip
