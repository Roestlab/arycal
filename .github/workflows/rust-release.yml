name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true
      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # ----------- Normal Builds (fast) -----------
  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          # CLI: musl (dynamic via musl-gcc)
          - name: arycal-cli-linux-musl
            bin: arycal
            os: ubuntu-latest

          # CLI: musl (fully static via cross)
          - name: arycal-cli-linux-musl-static
            bin: arycal
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          # CLI: glibc + MPI
          - name: arycal-cli-linux-gnu-mpi
            bin: arycal
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            features: mpi

          # GUI: glibc (22.04)
          - name: arycal-gui-linux-gnu
            bin: arycal-gui
            target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04

          # macOS + Windows
          - name: arycal-cli-macos
            bin: arycal
            target: x86_64-apple-darwin
            os: macos-latest
          - name: arycal-gui-macos
            bin: arycal-gui
            target: x86_64-apple-darwin
            os: macos-latest
          - name: arycal-cli-windows
            bin: arycal
            target: x86_64-pc-windows-msvc
            os: windows-latest
          - name: arycal-gui-windows
            bin: arycal-gui
            target: x86_64-pc-windows-msvc
            os: windows-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p artifacts

      # cross for the fully-static musl build
      - name: Install cross
        if: matrix.cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true

      # musl dynamic
      - name: Install musl-tools
        if: matrix.name == 'arycal-cli-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build CLI (musl)
        if: matrix.name == 'arycal-cli-linux-musl'
        run: |
          CC=musl-gcc cargo build --release
          cp target/release/${{ matrix.bin }} artifacts/

      # musl static
      - name: Build CLI (musl-static)
        if: matrix.name == 'arycal-cli-linux-musl-static'
        run: |
          cross build --release --target=${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      # GUI glibc
      - name: Install GUI deps
        if: matrix.name == 'arycal-gui-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libegl1-mesa libgtk-3-dev

      - name: Build GUI (glibc)
        if: matrix.name == 'arycal-gui-linux-gnu'
        run: |
          cargo build --release --target=${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      # MPI glibc
      - name: Install MPI
        if: matrix.name == 'arycal-cli-linux-gnu-mpi'
        run: sudo apt-get update && sudo apt-get install -y libopenmpi-dev openmpi-bin

      - name: Build CLI (MPI)
        if: matrix.name == 'arycal-cli-linux-gnu-mpi'
        run: |
          cargo build --release --target=${{ matrix.target }} --features mpi
          cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      # Non-Linux targets (Unix)
      - name: Add non-Linux target
        if: startsWith(matrix.target, 'x86_64-apple')
        run: rustup target add ${{ matrix.target }}

      - name: Build non-Linux (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --release --target=${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      # Non-Linux targets (Windows)
      - name: Build non-Linux (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --release --target=${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ matrix.bin }}.exe artifacts/

      - name: Upload Release Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ matrix.bin }}
          archive: ${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}
          target: ${{ matrix.target || '' }}
          include: LICENSE,README.md
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  # ----------- Compat Build (Ubuntu 18.04 container) -----------
  upload-assets-compat:
    needs: create-release
    strategy:
      matrix:
        include:
          # GUI: glibc (compat 18.04)
          - name: arycal-gui-linux-gnu-compat
            bin: arycal-gui
            target: x86_64-unknown-linux-gnu
            container: ubuntu:18.04

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p artifacts

      - name: Build in Ubuntu 18.04 container
        run: |
          docker run --rm \
            -v "$(pwd)":/work -w /work \
            ${{ matrix.container }} bash -c "
              apt-get update &&
              apt-get install -y curl build-essential pkg-config libssl-dev \
                                 libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev \
                                 libegl1-mesa libgtk-3-dev musl-tools &&
              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.85.0 &&
              source \$HOME/.cargo/env &&
              rustup target add ${{ matrix.target }} &&
              cargo build --release --target=${{ matrix.target }} &&
              cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/ &&
              chown $(id -u):$(id -g) artifacts/${{ matrix.bin }}
            "

      - name: Upload Compat Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          asset: artifacts/${{ matrix.bin }}
          build-tool: none
          archive: ${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}
          include: LICENSE,README.md
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
