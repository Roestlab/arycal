name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true
      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          # CLI: musl (current dynamic)
          - name: arycal-cli-linux-musl
            bin: arycal
            os: ubuntu-latest

          # CLI: musl (fully static, cross)
          - name: arycal-cli-linux-musl-static
            bin: arycal
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          # CLI: glibc (newer)
          - name: arycal-cli-linux-gnu-mpi
            bin: arycal
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            features: mpi

          # CLI: glibc (older 18.04 compat)
          - name: arycal-cli-linux-gnu-mpi-compat
            bin: arycal
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: ubuntu:18.04
            features: mpi

          # GUI: glibc (current 22.04)
          - name: arycal-gui-linux-gnu
            bin: arycal-gui
            target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04

          # GUI: glibc (compat 18.04)
          - name: arycal-gui-linux-gnu-compat
            bin: arycal-gui
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: ubuntu:18.04

          # macOS + Windows
          - name: arycal-cli-macos
            bin: arycal
            target: x86_64-apple-darwin
            os: macos-latest
          - name: arycal-gui-macos
            bin: arycal-gui
            target: x86_64-apple-darwin
            os: macos-latest
          - name: arycal-cli-windows
            bin: arycal
            target: x86_64-pc-windows-msvc
            os: windows-latest
          - name: arycal-gui-windows
            bin: arycal-gui
            target: x86_64-pc-windows-msvc
            os: windows-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p artifacts

      # Prepare cross for static musl build
      - name: Install cross
        if: matrix.cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross

      # ---- Build in container for compat targets ----
      - name: Build in Ubuntu 18.04 container (install Rust via rustup)
        if: matrix.container
        run: |
          docker run --rm -v $(pwd):/work -w /work ${{ matrix.container }} bash -c "
            apt-get update &&
            apt-get install -y curl build-essential pkg-config libssl-dev libx11-dev libxrandr-dev libxi-dev \
                               libgl1-mesa-dev libegl1-mesa libgtk-3-dev musl-tools libopenmpi-dev openmpi-bin &&
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.85.0 &&
            source \$HOME/.cargo/env &&
            rustup target add ${{ matrix.target }} &&
            cargo build --release --target=${{ matrix.target }} $([[ '${{ matrix.features }}' != '' ]] && echo '--features ${{ matrix.features }}') &&
            cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/
          "

      # ---- Normal builds (non-compat) ----
      - uses: actions-rs/toolchain@v1
        if: matrix.container == null
        with:
          toolchain: 1.85.0
          override: true

      - name: Install musl-tools
        if: matrix.name == 'arycal-cli-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build Arycal CLI (musl)
        if: matrix.name == 'arycal-cli-linux-musl'
        run: CC=musl-gcc cargo build --release && cp target/release/${{ matrix.bin }} artifacts/

      - name: Build Arycal CLI (fully static musl)
        if: matrix.name == 'arycal-cli-linux-musl-static'
        run: cross build --release --target=${{ matrix.target }} && cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      - name: Install GUI dependencies
        if: startsWith(matrix.name, 'arycal-gui-linux-gnu') && !matrix.container
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libegl1-mesa libgtk-3-dev

      - name: Build Arycal GUI
        if: startsWith(matrix.name, 'arycal-gui-linux-gnu') && !matrix.container
        run: cargo build --release --target=${{ matrix.target }} && cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      - name: Install MPI
        if: startsWith(matrix.name, 'arycal-cli-linux-gnu-mpi') && !matrix.container
        run: sudo apt-get update && sudo apt-get install -y libopenmpi-dev openmpi-bin

      - name: Build Arycal CLI (MPI)
        if: startsWith(matrix.name, 'arycal-cli-linux-gnu-mpi') && !matrix.container
        run: cargo build --release --target=${{ matrix.target }} --features mpi && cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      # ---- Non-Linux targets ----
      - name: Add target for non-Linux builds
        if: startsWith(matrix.target, 'x86_64-apple') || startsWith(matrix.target, 'x86_64-pc')
        run: rustup target add ${{ matrix.target }}

      - name: Build Non-Linux Targets
        if: startsWith(matrix.target, 'x86_64-apple') || startsWith(matrix.target, 'x86_64-pc')
        run: cargo build --release --target=${{ matrix.target }} && cp target/${{ matrix.target }}/release/${{ matrix.bin }} artifacts/

      # ---- Upload ----
      - name: Upload Release Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ matrix.bin }}
          archive: ${{ matrix.bin }}-${{ github.ref_name }}-${{ matrix.name }}
          target: ${{ matrix.target || '' }}
          include: LICENSE,README.md
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
          path: artifacts/${{ matrix.bin }}
          rename: ${{ matrix.name }}
